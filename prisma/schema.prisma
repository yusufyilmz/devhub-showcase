datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Skill {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name           String?
  experienceYear String? @map("experience_year")
  type           String

  projects Project[]

  @@map("skills")
}

model Company {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String
  link String

  experiences Experience[]
  projects    Project[]

  @@map("companies")
}

model Project {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String
  description String
  link        String?
  role        String
  public      Boolean @default(false)

  companyId    String?
  company      Company?    @relation(fields: [companyId], references: [id])
  skills       Skill[]
  Experience   Experience? @relation(fields: [experienceId], references: [id])
  experienceId String?

  @@map("projects")
}

model Experience {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  role         String
  startedAt    DateTime  @map("started_at")
  finishedAt   DateTime? @map("finished_at")
  achievements String[]

  projects  Project[]
  companyId String?
  company   Company?  @relation(fields: [companyId], references: [id])

  @@map("experiences")
}

model Education {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  institution     String
  institutionLink String @map("institution_link")

  degree       String
  fieldOfStudy String    @map("field_of_study")
  startedAt    DateTime  @map("started_at")
  finishedAt   DateTime? @map("finished_at")
  gpa          String?
  description  String?

  @@map("educations")
}

model Referral {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name           String?
  relationship   String?
  feedback       String?
  recommendation String?
  contactInfo    String? @map("contact_info")

  sessionId String @unique @map("session_id")

  review Review?

  @@map("referrals")
}

model Language {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String?
  proficiency String?

  @@map("languages")
}

model Certification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name  String?
  date  DateTime
  hours String?

  @@map("certifications")
}

model Achievements {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  title       String?
  description String?

  @@map("achievements")
}

model Challenges {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  problem  String?
  solution String?

  @@map("challenges")
}

model Characteristic {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String?
  details String?

  @@map("characteristics")
}

model Review {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  comment String?
  state   ReviewState @default(PENDING) // State of the review

  referral   Referral? @relation(fields: [referralId], references: [id])
  referralId String    @unique @map("referral_id")

  @@map("reviews")
}

enum ReviewState {
  PENDING
  APPROVED
}
